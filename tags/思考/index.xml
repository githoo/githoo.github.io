<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>思考 on babifarm.com</title>
    <link>http://babifarm.com/tags/%E6%80%9D%E8%80%83/</link>
    <description>Recent content in 思考 on babifarm.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Aug 2016 15:06:46 -0700</lastBuildDate>
    <atom:link href="http://babifarm.com/tags/%E6%80%9D%E8%80%83/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title> Java内存模型设计思想 </title>
      <link>http://babifarm.com/post/2016/08/java-mem-design/</link>
      <pubDate>Sun, 28 Aug 2016 15:06:46 -0700</pubDate>
      
      <guid>http://babifarm.com/post/2016/08/java-mem-design/</guid>
      <description>Java内存模型设计 多线程之间的数据通信 ：共享变量和消息机制 concurent java内存模型使用的共享变量机制 ACTOR模型使用的是消息机制 主内存 进程级？ 工作内存 线程级 多线程并发，即多核cpu执行 voliatile 实时更新cpu高速缓存(工作内存，线程使用的本地内存) atomic 机制 cas 锁机制 voliatile atomic 变量，控制读写状态 主内存 与 工作内存之间的关系 工作内存的初始变量是从主内存copy过来 工作内存默认是批处理更新主内存共享变量 如果是voliatile 共享变量，工作内存更新，立即更新主内存共享变量 主内存存放共享变量 堆 多cpu 每个cpu有高速缓存 cpu执行指令后的结果 voliatile机制 store load 保证依赖关系的顺序 编译成字节码时优化处理 happen-before 原则 写在读前 atomic 机制 cas机制保证多线程安全 compare and set 更新前比较新旧值，如果不等就更新，否则循环尝试更新</description>
    </item>
    
    <item>
      <title> 定时器设计思想 </title>
      <link>http://babifarm.com/post/2016/08/timer/</link>
      <pubDate>Sun, 28 Aug 2016 13:06:46 -0700</pubDate>
      
      <guid>http://babifarm.com/post/2016/08/timer/</guid>
      <description>设计思想 关键环节： 周期 cycle 刻度 index 任务 task 1、计时器 系统时间（纳秒级）自增，维持一个执行周期C和当前index值I (C ，I) 2、任务表 (I,(C,T)) 按任务初始化一个任务周期表（环形） 表中每个刻度I存放任务映射关系：周期C和定时任务T 3、刻度 任务执行的时间精度 4、定时机器类型模型 不同的精度有不停的模型 如小时精度，一天24个小时，类似手表，可以映射到12个小时，1~12小时，12个刻度 任务T1要每隔7天的3点执行，(7*24+3)/12 14个周期+3小时 ，这个任务在任务表的设置（C=14 ，I=3 ，T=T1）</description>
    </item>
    
  </channel>
</rss>
