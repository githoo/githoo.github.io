<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Protobuf on babifarm.com</title>
    <link>http://babifarm.com/tags/protobuf/</link>
    <description>Recent content in Protobuf on babifarm.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Aug 2016 09:16:46 -0700</lastBuildDate>
    <atom:link href="http://babifarm.com/tags/protobuf/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>protobuf 教程</title>
      <link>http://babifarm.com/post/2016/08/protobuf/</link>
      <pubDate>Tue, 02 Aug 2016 09:16:46 -0700</pubDate>
      
      <guid>http://babifarm.com/post/2016/08/protobuf/</guid>
      <description>protobuf 版本 2.5.0 ，因为Hadoop hbase 都是这个版本 为了兼容 ，请用是用这个版本 maven插件生成 protobuf 文件 package p13.search; message BookCid3Inst { required string cid3 = 1; //三级分类 required float weight = 2;// 权重 } message UserBookInstCid3s { required string uid = 1; //用户pin repeated BookCid3Inst cid3Inst = 2; //用户图书下感兴趣的三级分类 } pom 插件设置 ，配置说明看注释 &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-antrun-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.7&amp;lt;/version&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;id&amp;gt;compile-protoc&amp;lt;/id&amp;gt; &amp;lt;phase&amp;gt;generate-sources&amp;lt;/phase&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;tasks&amp;gt; &amp;lt;mkdir dir=&amp;quot;target/generated-sources&amp;quot;/&amp;gt; &amp;lt;path id=&amp;quot;proto.path&amp;quot;&amp;gt; &amp;lt;!--proto文件定义的位置--&amp;gt; &amp;lt;fileset dir=&amp;quot;src/main/resources/proto&amp;quot;&amp;gt; &amp;lt;include name=&amp;quot;**/*.proto&amp;quot;/&amp;gt; &amp;lt;/fileset&amp;gt; &amp;lt;/path&amp;gt; &amp;lt;pathconvert</description>
    </item>
    
    <item>
      <title>Protobuf vs Thrift 性能测试</title>
      <link>http://babifarm.com/post/2016/08/protobuf-vs-thrift/</link>
      <pubDate>Tue, 02 Aug 2016 09:06:46 -0700</pubDate>
      
      <guid>http://babifarm.com/post/2016/08/protobuf-vs-thrift/</guid>
      <description>简单对象结构的对比 protobuf 文件 package com.many.pro; message User { required string id = 1; required int32 weight = 2; required int32 age = 3; required string name = 4; required string title = 5; required string desc = 6; } thrift 文件 namespace java com.many.thrift struct User{ 1: required string id ; 2: required i32 weight ; 3: required i32 age ; 4: required string name ; 5: required string title ; 6: required string desc ; } 测试前提： 测试对象：测试时都会设置相同的属性值，保证测试公平 测试结果： 1、固定1分钟测试结果 名称 动作 大小 次数 protobuf 序列化 965 byte 12,560,420 thrift 序列化 994 byte 8,487,338 protobuf 反序列化 965 byte 88,119,395 thrift 反序列化 994 byte 10,147,918 protobuf 序列化反序列化交替进行 965 byte 10,713,643*2 thrift 序列化反序列化交替进行 994 byte 4,495,906*2 2、固定次数（1000000次）测试结果： 名称 动作 大小 时间(ms) protobuf 序列化 965 byte 4782 thrift 序列化 994 byte 6965 protobuf 反序列化 965 byte 624 thrift 反序列化 994 byte 5662 测试代码 1、protobuf 固定100000此测试代码（简单对象） package com.many.pro.thriftvsproto; import com.google.protobuf.InvalidProtocolBufferException; import com.many.pro.UserModel; public class ProtoSimpleTest { private byte [] bytes; public void serialization(){ long start = System.currentTimeMillis(); for(int i=0;i&amp;lt;1000000;i++){ UserModel.User.Builder builder = UserModel.User.newBuilder(); builder.setId(&amp;quot;123&amp;quot;); builder.setAge(123); builder.setDesc(&amp;quot;ni hao i am test&amp;quot;); builder.setName(&amp;quot;test&amp;quot;); builder.setTitle(&amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot;); builder.setWeight(200); UserModel.User user = builder.build(); user.toByteArray(); } long lastTime = System.currentTimeMillis() - start; initBytes(); int size = bytes.length; System.out.println(&amp;quot;protobuffer 序列化循环100w times，单条大小：&amp;quot;+size+&amp;quot; byte&amp;quot;+&amp;quot; 耗时：&amp;quot;+lastTime+&amp;quot; ms&amp;quot;); } public void un_serialization(){ initBytes(); long start = System.currentTimeMillis(); try { for(int i=0;i&amp;lt;1000000;i++){ UserModel.User user = UserModel.User.parseFrom(bytes); } } catch (InvalidProtocolBufferException e) { e.printStackTrace(); } int size = bytes.length; long lastTime = System.currentTimeMillis() - start; System.out.println(&amp;quot;protobuffer 反序列化循环100w times，单条大小：&amp;quot;+size+&amp;quot; byte&amp;quot;+&amp;quot; 耗时：&amp;quot;+lastTime+&amp;quot; ms&amp;quot;); } public void initBytes(){ UserModel.User.Builder builder = UserModel.User.newBuilder(); builder.setId(&amp;quot;123&amp;quot;); builder.setAge(123); builder.setDesc(&amp;quot;ni hao i am test&amp;quot;); builder.setName(&amp;quot;test&amp;quot;); builder.setTitle(&amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot;); builder.setWeight(200); UserModel.User user = builder.build(); bytes = user.toByteArray(); } public static void main(String [] args){ ProtoSimpleTest test = new ProtoSimpleTest(); test.serialization(); test.un_serialization(); } } 2、thrift 固定100000此测试代码（简单对象） package com.many.pro.thriftvsproto; import org.apache.thrift.TException; import org.apache.thrift.protocol.TBinaryProtocol; import org.apache.thrift.transport.TIOStreamTransport; import org.apache.thrift.transport.TTransport; import com.many.thrift.User; import java.io.ByteArrayInputStream; import java.io.ByteArrayOutputStream; public class ThriftSimlpleTest { private byte [] bytes; public void serialization() throws TException { long start = System.currentTimeMillis(); for(int i=0;i&amp;lt;1000000;i++){ User user = new User(); user.setId(&amp;quot;123&amp;quot;); user.setAge(123); user.setDesc(&amp;quot;ni hao i am test&amp;quot;); user.setName(&amp;quot;test&amp;quot;); user.setTitle(&amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot;); user.setWeight(200); // 序列化 ByteArrayOutputStream out = new ByteArrayOutputStream(); TTransport trans = new TIOStreamTransport(out); TBinaryProtocol tp = new TBinaryProtocol(trans); user.write(tp); //out.toByteArray(); } long lastTime = System.currentTimeMillis() - start; initBytes(); int size = bytes.length; System.out.println(&amp;quot;Thrift 序列化循环100w times，单条大小：&amp;quot;+size+&amp;quot; byte&amp;quot;+&amp;quot; 耗时：&amp;quot;+lastTime+&amp;quot; ms&amp;quot;); } public void un_serialization() throws TException { initBytes(); long start = System.currentTimeMillis(); for(int i=0;i&amp;lt;1000000;i++){ // 反序列化 ByteArrayInputStream in = new ByteArrayInputStream(bytes); TTransport trans = new TIOStreamTransport(in); TBinaryProtocol tp = new TBinaryProtocol(trans); User user = new User(); user.read(tp); } int size = bytes.length; long lastTime = System.currentTimeMillis() - start; System.out.println(&amp;quot;Thrift 反序列化循环100w times，单条大小：&amp;quot;+size+&amp;quot; byte&amp;quot;+&amp;quot; 耗时：&amp;quot;+lastTime+&amp;quot; ms&amp;quot;); } public void initBytes() throws TException { User user = new User(); user.setId(&amp;quot;123&amp;quot;); user.setAge(123); user.setDesc(&amp;quot;ni hao i am test&amp;quot;); user.setName(&amp;quot;test&amp;quot;); user.setTitle(&amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot;); user.setWeight(200); // 序列化 ByteArrayOutputStream out = new ByteArrayOutputStream(); TTransport trans = new TIOStreamTransport(out); TBinaryProtocol tp = new TBinaryProtocol(trans); user.write(tp); bytes = out.toByteArray(); } public static void main(String [] args) throws TException { ThriftSimlpleTest test = new ThriftSimlpleTest(); test.serialization(); test.un_serialization(); } } 3、protobuf 固定1分钟此测试代码（简单对象） package com.many.pro.thriftvsproto; import com.google.protobuf.InvalidProtocolBufferException; import com.many.pro.UserModel; import java.util.concurrent.*; public class PBSimpleOneMinutes { static int sum = 0; static final ExecutorService exec = Executors.newFixedThreadPool(1); private static byte [] bytes ; static class Service implements Runnable{ @Override public void run() { while (true){ serialization(); un_serialization(); sum++; } } } public static void un_serialization(){ // initBytes(); // long start = System.currentTimeMillis(); try { UserModel.User.parseFrom(bytes); } catch (InvalidProtocolBufferException e) { e.printStackTrace(); } //int size = bytes.length; // long lastTime = System.currentTimeMillis() - start; // System.out.println(&amp;quot;protobuffer 反序列化循环100w times，单条大小：&amp;quot;+size+&amp;quot; byte&amp;quot;+&amp;quot; 耗时：&amp;quot;+lastTime+&amp;quot; ms&amp;quot;); } public static void serialization(){ UserModel.User.Builder builder = UserModel.User.newBuilder(); builder.setId(&amp;quot;123&amp;quot;); builder.setAge(123); builder.setDesc(&amp;quot;ni hao i am test&amp;quot;); builder.setName(&amp;quot;test&amp;quot;); builder.setTitle(&amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot;); builder.setWeight(200); UserModel.User user = builder.build(); user.toByteArray(); } public static void initBytes(){ UserModel.User.Builder builder = UserModel.User.newBuilder(); builder.setId(&amp;quot;123&amp;quot;); builder.setAge(123); builder.setDesc(&amp;quot;ni hao i am test&amp;quot;); builder.setName(&amp;quot;test&amp;quot;); builder.setTitle(&amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot;); builder.setWeight(200); UserModel.User user = builder.build(); bytes = user.toByteArray(); } public static void main(String [] a){ initBytes(); Future future = exec.submit(new Service()); try { future.get(60, TimeUnit.SECONDS); } catch (InterruptedException e) { e.printStackTrace(); } catch (ExecutionException e) { e.printStackTrace(); } catch (TimeoutException e) { e.printStackTrace(); } System.out.println(&amp;quot;60 seconds run &amp;quot; + sum + &amp;quot; tiems&amp;quot;); } } 4、thrift 固定1分钟此测试代码（简单对象） package com.many.pro.thriftvsproto; import org.apache.thrift.TException; import java.io.ByteArrayInputStream; import java.io.ByteArrayOutputStream; import java.util.concurrent.*; import com.many.thrift.User; import org.apache.thrift.protocol.TBinaryProtocol; import org.apache.thrift.transport.TIOStreamTransport; import org.apache.thrift.transport.TTransport; public class ThriftSimpleOneMinutes { static int sum = 0; private static byte [] bytes; static final ExecutorService exec = Executors.newFixedThreadPool(1); static class Service implements Runnable{ @Override public void run() { while (true){ try { serialization(); un_serialization(); } catch (TException e) { e.printStackTrace(); } sum++; } } } public static void serialization() throws TException { User user = new User(); user.setId(&amp;quot;123&amp;quot;); user.setAge(123); user.setDesc(&amp;quot;ni hao i am test&amp;quot;); user.setName(&amp;quot;test&amp;quot;); user.setTitle(&amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot;); user.setWeight(200); // 序列化 ByteArrayOutputStream out = new ByteArrayOutputStream(); TTransport trans = new TIOStreamTransport(out); TBinaryProtocol tp = new TBinaryProtocol(trans); user.write(tp); } public static void un_serialization() throws TException { ByteArrayInputStream in = new ByteArrayInputStream(bytes); TTransport trans = new TIOStreamTransport(in); TBinaryProtocol tp = new TBinaryProtocol(trans); User user = new User(); user.read(tp); } public static void initBytes() throws TException { User user = new User(); user.setId(&amp;quot;123&amp;quot;); user.setAge(123); user.setDesc(&amp;quot;ni hao i am test&amp;quot;); user.setName(&amp;quot;test&amp;quot;); user.setTitle(&amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot; + &amp;quot;this is a test vs thrift serialization this is a test vs thrift serialization this is a test vs thrift serialization&amp;quot;); user.setWeight(200); // 序列化 ByteArrayOutputStream out = new ByteArrayOutputStream(); TTransport trans = new TIOStreamTransport(out); TBinaryProtocol tp = new TBinaryProtocol(trans); user.write(tp); bytes = out.toByteArray(); } public static void main(String [] a){ try { initBytes(); } catch (TException e) { e.printStackTrace(); } Future future = exec.submit(new Service()); try { future.get(60, TimeUnit.SECONDS); } catch (InterruptedException e) { e.printStackTrace(); } catch (ExecutionException e) { e.printStackTrace(); } catch (TimeoutException e) { e.printStackTrace(); } System.out.println(&amp;quot;60 seconds run &amp;quot; + sum + &amp;quot; tiems&amp;quot;); } } 复杂对象结构的对比 protobuf 文件 // See README.txt for information and build instructions.</description>
    </item>
    
  </channel>
</rss>
